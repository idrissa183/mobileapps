import React, { useEffect, useState } from 'react';
import { 
  View, 
  Text, 
  ScrollView, 
  SafeAreaView, 
  StyleSheet, 
  Image, 
  TouchableOpacity, 
  Dimensions, 
  ActivityIndicator,
  Modal,
  TextInput,
  Alert
} from "react-native";
import { useTheme } from '../../hooks/useTheme';
import { Ionicons } from '@expo/vector-icons';
import cardService, { Card, CardCreateRequest, CardStatus, CardType } from '../../services/cardService';
import transactionService, { TransactionType, Currency, TransferRequest, DepositRequest, WithdrawalRequest } from '../../services/transactionService';
import useTranslation from '../../hooks/useTranslation';

const { width } = Dimensions.get('window');

const CardsScreen: React.FC = () => {
  const { isDarkMode } = useTheme();
  const { t } = useTranslation();

  // Apply styles based on theme
  const containerStyle = isDarkMode ? styles.darkContainer : styles.lightContainer;
  const headerTextStyle = isDarkMode ? styles.darkHeaderText : styles.lightHeaderText;
  const secondaryTextStyle = isDarkMode ? styles.darkSecondaryText : styles.lightSecondaryText;
  const cardDetailBgStyle = isDarkMode ? styles.darkCardDetailBg : styles.lightCardDetailBg;
  const balanceContainerStyle = isDarkMode ? styles.darkBalanceContainer : styles.lightBalanceContainer;
  const inputStyle = isDarkMode ? styles.darkInput : styles.lightInput;
  const modalContainerStyle = isDarkMode ? styles.darkModalContainer : styles.lightModalContainer;

  // States
  const [cards, setCards] = useState<Card[]>([]);
  const [selectedCard, setSelectedCard] = useState<Card | null>(null);
  const [isCvvVisible, setIsCvvVisible] = useState(false);
  const [loading, setLoading] = useState(false);
  const [cardsLoading, setCardsLoading] = useState(true);
  
  // New Card Modal states
  const [isNewCardModalVisible, setIsNewCardModalVisible] = useState(false);
  const [newCardName, setNewCardName] = useState('');
  const [isContactless, setIsContactless] = useState(true);
  const [isVirtual, setIsVirtual] = useState(false);
  const [cardType, setCardType] = useState<CardType>(CardType.DEBIT);
  
  // Transaction Modals states
  const [isTopUpModalVisible, setIsTopUpModalVisible] = useState(false);
  const [isWithdrawModalVisible, setIsWithdrawModalVisible] = useState(false);
  const [isTransferModalVisible, setIsTransferModalVisible] = useState(false);
  const [transactionAmount, setTransactionAmount] = useState('');
  const [transactionDescription, setTransactionDescription] = useState('');
  const [recipientAccountNumber, setRecipientAccountNumber] = useState('');
  const [contacts, setContacts] = useState<{name: string, account_number: string}[]>([
    {name: 'John Doe', account_number: '1234567890'},
    {name: 'Jane Smith', account_number: '0987654321'},
    {name: 'Mike Johnson', account_number: '1122334455'},
  ]);

  // Fetch cards on load
  useEffect(() => {
    fetchCards();
  }, []);

  // Function to fetch cards
  const fetchCards = async () => {
    setCardsLoading(true);
    try {
      const fetchedCards = await cardService.getAllCards();
      setCards(fetchedCards);
      
      // Select first card by default if one exists
      if (fetchedCards.length > 0 && !selectedCard) {
        setSelectedCard(fetchedCards[0]);
      }
    } catch (error) {
      console.error('Error fetching cards:', error);
      Alert.alert(
        t('common.error'),
        t('cards.fetchError'),
        [{ text: t('common.ok') }]
      );
    } finally {
      setCardsLoading(false);
    }
  };

  // Function to open new card modal
  const openNewCardModal = () => {
    setNewCardName(t('cards.defaultNewCardName'));
    setIsContactless(true);
    setIsVirtual(false);
    setCardType(CardType.DEBIT);
    setIsNewCardModalVisible(true);
  };

  // Function to create new card
  const createNewCard = async () => {
    setLoading(true);
    try {
      const newCardData: CardCreateRequest = {
        card_name: newCardName || t('cards.defaultNewCardName'),
        card_type: cardType,
        is_contactless: isContactless,
        is_virtual: isVirtual
      };
      
      const newCard = await cardService.createCard(newCardData);
      
      // Add new card and select it
      setCards(prevCards => [...prevCards, newCard]);
      setSelectedCard(newCard);
      setIsNewCardModalVisible(false);
      Alert.alert(
        t('common.success'),
        t('cards.createSuccess'),
        [{ text: t('common.ok') }]
      );
      
    } catch (error) {
      console.error('Error creating new card:', error);
      Alert.alert(
        t('common.error'),
        t('cards.createError'),
        [{ text: t('common.ok') }]
      );
    } finally {
      setLoading(false);
    }
  };

  // Reset transaction modals inputs
  const resetTransactionInputs = () => {
    setTransactionAmount('');
    setTransactionDescription('');
    setRecipientAccountNumber('');
  };

  // Handle Top Up (Deposit)
  const handleTopUp = async () => {
    if (!transactionAmount || parseFloat(transactionAmount) <= 0) {
      Alert.alert(
        t('common.error'),
        t('transactions.invalidAmount'),
        [{ text: t('common.ok') }]
      );
      return;
    }

    setLoading(true);
    try {
      const depositData: DepositRequest = {
        amount: parseFloat(transactionAmount),
        description: transactionDescription || t('transactions.depositDefault')
      };
      
      await transactionService.depositMoney(depositData);
      setIsTopUpModalVisible(false);
      resetTransactionInputs();
      Alert.alert(
        t('common.success'),
        t('transactions.depositSuccess'),
        [{ text: t('common.ok') }]
      );
      
    } catch (error) {
      console.error('Error depositing money:', error);
      Alert.alert(
        t('common.error'),
        t('transactions.depositError'),
        [{ text: t('common.ok') }]
      );
    } finally {
      setLoading(false);
    }
  };

  // Handle Withdraw
  const handleWithdraw = async () => {
    if (!transactionAmount || parseFloat(transactionAmount) <= 0) {
      Alert.alert(
        t('common.error'),
        t('transactions.invalidAmount'),
        [{ text: t('common.ok') }]
      );
      return;
    }

    setLoading(true);
    try {
      const withdrawalData: WithdrawalRequest = {
        amount: parseFloat(transactionAmount),
        description: transactionDescription || t('transactions.withdrawalDefault')
      };
      
      await transactionService.withdrawMoney(withdrawalData);
      setIsWithdrawModalVisible(false);
      resetTransactionInputs();
      Alert.alert(
        t('common.success'),
        t('transactions.withdrawalSuccess'),
        [{ text: t('common.ok') }]
      );
      
    } catch (error) {
      console.error('Error withdrawing money:', error);
      Alert.alert(
        t('common.error'),
        t('transactions.withdrawalError'),
        [{ text: t('common.ok') }]
      );
    } finally {
      setLoading(false);
    }
  };

  // Handle Transfer
  const handleTransfer = async () => {
    if (!recipientAccountNumber) {
      Alert.alert(
        t('common.error'),
        t('transactions.recipientRequired'),
        [{ text: t('common.ok') }]
      );
      return;
    }
    
    if (!transactionAmount || parseFloat(transactionAmount) <= 0) {
      Alert.alert(
        t('common.error'),
        t('transactions.invalidAmount'),
        [{ text: t('common.ok') }]
      );
      return;
    }

    setLoading(true);
    try {
      const transferData: TransferRequest = {
        to_account_number: recipientAccountNumber,
        amount: parseFloat(transactionAmount),
        description: transactionDescription || t('transactions.transferDefault')
      };
      
      await transactionService.transferMoney(transferData);
      setIsTransferModalVisible(false);
      resetTransactionInputs();
      Alert.alert(
        t('common.success'),
        t('transactions.transferSuccess'),
        [{ text: t('common.ok') }]
      );
      
    } catch (error) {
      console.error('Error transferring money:', error);
      Alert.alert(
        t('common.error'),
        t('transactions.transferError'),
        [{ text: t('common.ok') }]
      );
    } finally {
      setLoading(false);
    }
  };

  const handleCardClick = (card: Card) => {
    setSelectedCard(card);
    setIsCvvVisible(false); // Reset CVV visibility when changing cards
  };

  const toggleCvvVisibility = () => {
    setIsCvvVisible(!isCvvVisible);
  };

  const formatNumberWithCommas = (number: number) => {
    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  };

  // Format masked card number
  const formatCardNumber = (cardNumber: string) => {
    // If card is masked (like "************8898"), format it
    if (cardNumber.startsWith('*')) {
      const lastFour = cardNumber.slice(-4);
      return `**** **** **** ${lastFour}`;
    }
    
    // Otherwise return formatted card
    return cardNumber.replace(/(\d{4})(?=\d)/g, '$1 ');
  };

  // Example balance - In a real app, this would come from your API
  const balance = 1230.60;

  // Create Card Button Component - Always shown regardless of cards existence
  const CreateCardButton = () => (
    <TouchableOpacity 
      style={styles.createCardButton}
      onPress={openNewCardModal}
    >
      <View style={styles.createCardContent}>
        <Ionicons name="add-circle" size={24} color="#2563EB" />
        <Text style={styles.createCardText}>{t('cards.createCard')}</Text>
      </View>
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={[styles.container, containerStyle]}>
      {/* Balance Section */}
      <View style={[styles.balanceContainer, balanceContainerStyle]}>
        <View>
          <Text style={[styles.currencyLabel, secondaryTextStyle]}>{t('currency.usd')}</Text>
          <Text style={[styles.balanceAmount, headerTextStyle]}>{formatNumberWithCommas(balance.toFixed(2))}</Text>
        </View>
        <TouchableOpacity 
          style={styles.topUpButton}
          onPress={() => setIsTopUpModalVisible(true)}
        >
          <Ionicons name="add-circle-outline" size={18} color={isDarkMode ? "#FFFFFF" : "#111827"} />
          <Text style={[styles.topUpText, isDarkMode && styles.darkTopUpText]}>{t('cards.topUp')}</Text>
        </TouchableOpacity>
      </View>

      {/* Cards Section */}
      {cardsLoading ? (
        <View style={styles.loadingCardContainer}>
          <ActivityIndicator size="small" color="#2563EB" />
        </View>
      ) : (
        <ScrollView 
          horizontal={true} 
          showsHorizontalScrollIndicator={false} 
          style={styles.cardsContainer}
          contentContainerStyle={{ paddingRight: 20 }}
        >
          {cards.map((card, index) => (
            <TouchableOpacity 
              key={card.id} 
              onPress={() => handleCardClick(card)} 
              activeOpacity={0.8}
            >
              <View style={[styles.cardWrapper,
                (index % 2 === 0 ? {borderColor: "#2563EB"} : {borderColor: "#80b2e6"}),
                (selectedCard?.id === card.id ? {borderWidth: 2} : {})]}
              >
                <View style={[styles.card, (index % 2 === 0 ? styles.blueCard : styles.cyanCard)]}>
                  <View style={styles.cardHeader}>
                    <Image 
                      source={require('../../assets/avatars/avatar2.jpg')} 
                      style={styles.cardLogo}
                    />
                  </View>
                  
                  <View style={styles.cardNumberContainer}>
                    <Text style={styles.cardNumberText}>****</Text>
                    <Text style={styles.cardNumberText}>****</Text>
                    <Text style={styles.cardNumberText}>****</Text>
                    <Text style={styles.cardNumberText}>
                      {card.card_number.slice(-4)}
                    </Text>
                  </View>
                  
                  <View style={styles.cardChipSection}>
                    <View style={styles.cardBrand}>
                      <Text style={styles.cardBrandText}>BCD</Text>
                    </View>
                    <Image 
                      source={require('../../assets/puce.png')} 
                      style={styles.cardPuce}
                    />
                  </View>
                  
                  <View style={styles.cardFooter}>
                    <Text style={styles.cardDate}>{t('cards.expiresAt')}: {card.expiry_date}</Text>
                    <Text style={styles.cardStatusBadge}>
                      {card.status === CardStatus.ACTIVE ? t('cards.active') : t('cards.inactive')}
                    </Text>
                  </View>
                </View>
              </View>
            </TouchableOpacity>
          ))}
          
          {/* Add Card Button */}
          <CreateCardButton />
        </ScrollView>
      )}

      {/* Card Details Section */}
      {selectedCard && (
        <View style={[styles.cardDetailsSection, cardDetailBgStyle]}>
          <View style={styles.sectionHeader}>
            <Text style={[styles.sectionTitle, headerTextStyle]}>{t('cards.cardDetail')}</Text>
            {/* Removed the "New Card" button as requested */}
          </View>

          {/* Card Info Items */}
          <View style={styles.cardInfoContainer}>
            <View style={styles.cardInfoItem}>
              <Text style={[styles.cardInfoLabel, secondaryTextStyle]}>{t('cards.cardNumber')}:</Text>
              <Text style={[styles.cardInfoValueText, headerTextStyle]}>
                {formatCardNumber(selectedCard.card_number)}
              </Text>
            </View>

            <View style={styles.cardInfoItem}>
              <Text style={[styles.cardInfoLabel, secondaryTextStyle]}>{t('cards.expiryDate')}:</Text>
              <Text style={[styles.cardInfoValueText, headerTextStyle]}>{selectedCard.expiry_date}</Text>
            </View>

            <View style={styles.cardInfoItem}>
              <Text style={[styles.cardInfoLabel, secondaryTextStyle]}>{t('cards.cardType')}:</Text>
              <Text style={[styles.cardInfoValueText, headerTextStyle]}>
                {selectedCard.card_type === CardType.DEBIT ? t('cards.debitCard') : t('cards.virtualCard')}
              </Text>
            </View>

            <View style={styles.cardInfoItem}>
              <Text style={[styles.cardInfoLabel, secondaryTextStyle]}>{t('cards.status')}:</Text>
              <View style={styles.statusContainer}>
                <View style={[
                  styles.statusIndicator, 
                  selectedCard.status === CardStatus.ACTIVE ? styles.activeIndicator : styles.inactiveIndicator
                ]} />
                <Text style={[styles.cardInfoValueText, headerTextStyle]}>
                  {selectedCard.status === CardStatus.ACTIVE ? t('cards.active') : t('cards.inactive')}
                </Text>
              </View>
            </View>

            <View style={styles.cardInfoItem}>
              <Text style={[styles.cardInfoLabel, secondaryTextStyle]}>{t('cards.contactless')}:</Text>
              <Text style={[styles.cardInfoValueText, headerTextStyle]}>
                {selectedCard.is_contactless ? t('common.yes') : t('common.no')}
              </Text>
            </View>
          </View>

          {/* Action Buttons */}
          <View style={styles.cardActionsContainer}>
            <TouchableOpacity 
              style={styles.withdrawButton}
              onPress={() => setIsWithdrawModalVisible(true)}
            >
              <Ionicons name="arrow-down-outline" size={18} color="#FFFFFF" />
              <Text style={styles.actionButtonText}>{t('cards.withdraw')}</Text>
            </TouchableOpacity>
            
            <TouchableOpacity 
              style={styles.transferButton}
              onPress={() => setIsTransferModalVisible(true)}
            >
              <Ionicons name="swap-horizontal-outline" size={18} color="#FFFFFF" />
              <Text style={styles.actionButtonText}>{t('cards.transfer')}</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}

      {/* Create New Card Modal */}
      <Modal
        visible={isNewCardModalVisible}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setIsNewCardModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={[styles.modalContainer, modalContainerStyle]}>
            <View style={styles.modalHeader}>
              <Text style={[styles.modalTitle, isDarkMode ? styles.darkHeaderText : styles.lightHeaderText]}>
                {t('cards.createNewCard')}
              </Text>
              <TouchableOpacity onPress={() => setIsNewCardModalVisible(false)}>
                <Ionicons name="close" size={24} color={isDarkMode ? "#FFFFFF" : "#111827"} />
              </TouchableOpacity>
            </View>

            <View style={styles.modalContent}>
              <View style={styles.inputGroup}>
                <Text style={[styles.inputLabel, secondaryTextStyle]}>{t('cards.cardName')}</Text>
                <TextInput
                  style={[styles.input, inputStyle]}
                  value={newCardName}
                  onChangeText={setNewCardName}
                  placeholder={t('cards.defaultNewCardName')}
                  placeholderTextColor={isDarkMode ? "#9CA3AF" : "#6B7280"}
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={[styles.inputLabel, secondaryTextStyle]}>{t('cards.cardType')}</Text>
                <View style={styles.radioGroup}>
                  <TouchableOpacity 
                    style={[styles.radioButton, cardType === CardType.DEBIT && styles.radioButtonActive]}
                    onPress={() => setCardType(CardType.DEBIT)}
                  >
                    <View style={[styles.radioInner, cardType === CardType.DEBIT && styles.radioInnerActive]} />
                    <Text style={[styles.radioText, headerTextStyle]}>{t('cards.debitCard')}</Text>
                  </TouchableOpacity>
                  
                  <TouchableOpacity 
                    style={[styles.radioButton, cardType === CardType.VIRTUAL && styles.radioButtonActive]}
                    onPress={() => setCardType(CardType.VIRTUAL)}
                  >
                    <View style={[styles.radioInner, cardType === CardType.VIRTUAL && styles.radioInnerActive]} />
                    <Text style={[styles.radioText, headerTextStyle]}>{t('cards.virtualCard')}</Text>
                  </TouchableOpacity>
                </View>
              </View>

              <View style={styles.inputGroup}>
                <Text style={[styles.inputLabel, secondaryTextStyle]}>{t('cards.options')}</Text>
                <View style={styles.checkboxGroup}>
                  <TouchableOpacity 
                    style={styles.checkbox} 
                    onPress={() => setIsContactless(!isContactless)}
                  >
                    <View style={[styles.checkboxInner, isContactless && styles.checkboxActive]}>
                      {isContactless && <Ionicons name="checkmark" size={16} color="#FFFFFF" />}
                    </View>
                    <Text style={[styles.checkboxText, headerTextStyle]}>{t('cards.contactless')}</Text>
                  </TouchableOpacity>
                  
                  <TouchableOpacity 
                    style={styles.checkbox} 
                    onPress={() => setIsVirtual(!isVirtual)}
                  >
                    <View style={[styles.checkboxInner, isVirtual && styles.checkboxActive]}>
                      {isVirtual && <Ionicons name="checkmark" size={16} color="#FFFFFF" />}
                    </View>
                    <Text style={[styles.checkboxText, headerTextStyle]}>{t('cards.virtual')}</Text>
                  </TouchableOpacity>
                </View>
              </View>
            </View>

            <View style={styles.modalActions}>
              <TouchableOpacity 
                style={styles.cancelButton} 
                onPress={() => setIsNewCardModalVisible(false)}
              >
                <Text style={styles.cancelButtonText}>{t('common.cancel')}</Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.createButton} 
                onPress={createNewCard}
                disabled={loading}
              >
                {loading ? (
                  <ActivityIndicator size="small" color="#FFFFFF" />
                ) : (
                  <Text style={styles.createButtonText}>{t('common.create')}</Text>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Top Up Modal */}
      <Modal
        visible={isTopUpModalVisible}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setIsTopUpModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={[styles.modalContainer, modalContainerStyle]}>
            <View style={styles.modalHeader}>
              <Text style={[styles.modalTitle, isDarkMode ? styles.darkHeaderText : styles.lightHeaderText]}>
                {t('transactions.topUp')}
              </Text>
              <TouchableOpacity onPress={() => setIsTopUpModalVisible(false)}>
                <Ionicons name="close" size={24} color={isDarkMode ? "#FFFFFF" : "#111827"} />
              </TouchableOpacity>
            </View>

            <View style={styles.modalContent}>
              <View style={styles.inputGroup}>
                <Text style={[styles.inputLabel, secondaryTextStyle]}>{t('transactions.amount')}</Text>
                <TextInput
                  style={[styles.input, inputStyle]}
                  value={transactionAmount}
                  onChangeText={setTransactionAmount}
                  placeholder="0.00"
                  placeholderTextColor={isDarkMode ? "#9CA3AF" : "#6B7280"}
                  keyboardType="numeric"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={[styles.inputLabel, secondaryTextStyle]}>{t('transactions.description')}</Text>
                <TextInput
                  style={[styles.input, inputStyle]}
                  value={transactionDescription}
                  onChangeText={setTransactionDescription}
                  placeholder={t('transactions.depositDefault')}
                  placeholderTextColor={isDarkMode ? "#9CA3AF" : "#6B7280"}
                />
              </View>
            </View>

            <View style={styles.modalActions}>
              <TouchableOpacity 
                style={styles.cancelButton} 
                onPress={() => setIsTopUpModalVisible(false)}
              >
                <Text style={styles.cancelButtonText}>{t('common.cancel')}</Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.createButton} 
                onPress={handleTopUp}
                disabled={loading}
              >
                {loading ? (
                  <ActivityIndicator size="small" color="#FFFFFF" />
                ) : (
                  <Text style={styles.createButtonText}>{t('common.confirm')}</Text>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Withdraw Modal */}
      <Modal
        visible={isWithdrawModalVisible}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setIsWithdrawModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={[styles.modalContainer, modalContainerStyle]}>
            <View style={styles.modalHeader}>
              <Text style={[styles.modalTitle, isDarkMode ? styles.darkHeaderText : styles.lightHeaderText]}>
                {t('transactions.withdraw')}
              </Text>
              <TouchableOpacity onPress={() => setIsWithdrawModalVisible(false)}>
                <Ionicons name="close" size={24} color={isDarkMode ? "#FFFFFF" : "#111827"} />
              </TouchableOpacity>
            </View>

            <View style={styles.modalContent}>
              <View style={styles.inputGroup}>
                <Text style={[styles.inputLabel, secondaryTextStyle]}>{t('transactions.amount')}</Text>
                <TextInput
                  style={[styles.input, inputStyle]}
                  value={transactionAmount}
                  onChangeText={setTransactionAmount}
                  placeholder="0.00"
                  placeholderTextColor={isDarkMode ? "#9CA3AF" : "#6B7280"}
                  keyboardType="numeric"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={[styles.inputLabel, secondaryTextStyle]}>{t('transactions.description')}</Text>
                <TextInput
                  style={[styles.input, inputStyle]}
                  value={transactionDescription}
                  onChangeText={setTransactionDescription}
                  placeholder={t('transactions.withdrawalDefault')}
                  placeholderTextColor={isDarkMode ? "#9CA3AF" : "#6B7280"}
                />
              </View>
            </View>

            <View style={styles.modalActions}>
              <TouchableOpacity 
                style={styles.cancelButton} 
                onPress={() => setIsWithdrawModalVisible(false)}
              >
                <Text style={styles.cancelButtonText}>{t('common.cancel')}</Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.createButton} 
                onPress={handleWithdraw}
                disabled={loading}
              >
                {loading ? (
                  <ActivityIndicator size="small" color="#FFFFFF" />
                ) : (
                  <Text style={styles.createButtonText}>{t('common.confirm')}</Text>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Transfer Modal */}
      <Modal
        visible={isTransferModalVisible}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setIsTransferModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={[styles.modalContainer, modalContainerStyle]}>
            <View style={styles.modalHeader}>
              <Text style={[styles.modalTitle, isDarkMode ? styles.darkHeaderText : styles.lightHeaderText]}>
                {t('transactions.transfer')}
              </Text>
              <TouchableOpacity onPress={() => setIsTransferModalVisible(false)}>
                <Ionicons name="close" size={24} color={isDarkMode ? "#FFFFFF" : "#111827"} />
              </TouchableOpacity>
            </View>

            <View style={styles.modalContent}>
              <View style={styles.inputGroup}>
                <Text style={[styles.inputLabel, secondaryTextStyle]}>{t('transactions.recipient')}</Text>
                <View style={[styles.dropdown, inputStyle]}>
                  <ScrollView style={styles.dropdownList}>
                    {contacts.map((contact, index) => (
                      <TouchableOpacity 
                        key={index}
                        style={[
                          styles.dropdownItem,
                          recipientAccountNumber === contact.account_number && styles.selectedDropdownItem
                        ]}
                        onPress={() => setRecipientAccountNumber(contact.account_number)}
                      >
                        <Text style={[
                          styles.dropdownText,
                          recipientAccountNumber === contact.account_number && styles.selectedDropdownText,
                          isDarkMode && styles.darkDropdownText
                        ]}>
                          {contact.name} ({contact.account_number})
                        </Text>
                      </TouchableOpacity>
                    ))}
                  </ScrollView>
                </View>
              </View>

              <View style={styles.inputGroup}>
                <Text style={[styles.inputLabel, secondaryTextStyle]}>{t('transactions.amount')}</Text>
                <TextInput
                  style={[styles.input, inputStyle]}
                  value={transactionAmount}
                  onChangeText={setTransactionAmount}
                  placeholder="0.00"
                  placeholderTextColor={isDarkMode ? "#9CA3AF" : "#6B7280"}
                  keyboardType="numeric"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={[styles.inputLabel, secondaryTextStyle]}>{t('transactions.description')}</Text>
                <TextInput
                  style={[styles.input, inputStyle]}
                  value={transactionDescription}
                  onChangeText={setTransactionDescription}
                  placeholder={t('transactions.transferDefault')}
                  placeholderTextColor={isDarkMode ? "#9CA3AF" : "#6B7280"}
                />
              </View>
            </View>

            <View style={styles.modalActions}>
              <TouchableOpacity 
                style={styles.cancelButton} 
                onPress={() => setIsTransferModalVisible(false)}
              >
                <Text style={styles.cancelButtonText}>{t('common.cancel')}</Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.createButton} 
                onPress={handleTransfer}
                disabled={loading}
              >
                {loading ? (
                  <ActivityIndicator size="small" color="#FFFFFF" />
                ) : (
                  <Text style={styles.createButtonText}>{t('common.confirm')}</Text>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  darkContainer: {
    backgroundColor: "#111827",
  },
  lightContainer: {
    backgroundColor: "#F9FAFB",
  },
  
  // Balance Section
  balanceContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
  },
  darkBalanceContainer: {
    backgroundColor: "#1F2937",
  },
  lightBalanceContainer: {
    backgroundColor: "#FFFFFF",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 3,
    elevation: 2,
  },
  currencyLabel: {
    fontSize: 14,
    marginBottom: 4,
  },
  balanceAmount: {
    fontSize: 24,
    fontWeight: '600',
  },
  darkHeaderText: {
    color: "#FFFFFF",
  },
  lightHeaderText: {
    color: "#111827",
  },
  darkSecondaryText: {
    color: "#9CA3AF",
  },
  lightSecondaryText: {
    color: "#6B7280",
  },
  topUpButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    backgroundColor: "#EFF6FF",
  },
  topUpText: {
    marginLeft: 4,
    fontWeight: '500',
    color: "#111827",
  },
  darkTopUpText: {
    color: "#F9FAFB",
  },
  
  // Cards Section
  cardsContainer: {
    marginBottom: 10, // Reduce vertical spacing between cards and details section
  },
  loadingCardContainer: {
    height: 200,
    justifyContent: 'center',
    alignItems: 'center',
  },
  cardWrapper: {
    marginLeft: 16,
    marginRight: 4,
    borderRadius: 16,
    borderWidth: 0,
    paddingBottom: 4,
  },
  card: {
    width: width * 0.65,
    height: 200,
    borderRadius: 16,
    padding: 16,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  blueCard: {
    backgroundColor: "#2563EB",
  },
  cyanCard: {
    backgroundColor: "#06B6D4",
  },
  cardHeader: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
  },
  cardLogo: {
    width: 36,
    height: 36,
    borderRadius: 18,
  },
  cardNumberContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 16,
  },
  cardNumberText: {
    color: "#FFFFFF",
    fontSize: 16,
    fontWeight: '500',
    letterSpacing: 1,
  },
  cardChipSection: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 16,
  },
  cardPuce: {
    width: 40,
    height: 30,
    resizeMode: 'contain',
  },
  cardBrand: {
    backgroundColor: "rgba(255, 255, 255, 0.2)",
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
  },
  cardBrandText: {
    color: "#FFFFFF",
    fontWeight: '600',
  },
  cardFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 'auto', 
    alignItems: 'center',
  },
  cardDate: {
    color: "#FFFFFF",
    fontSize: 14,
  },
  cardStatusBadge: {
    backgroundColor: "rgba(255, 255, 255, 0.3)",
    color: "#FFFFFF",
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 12,
    fontSize: 12,
    fontWeight: '500',
  },
  createCardButton: {
    width: width * 0.3,
    height: 200,
    backgroundColor: "#F9FAFB",
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 16,
    borderWidth: 2,
    borderColor: "#E5E7EB",
    borderStyle: 'dashed',
  },
  createCardContent: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  createCardText: {
    marginTop: 8,
    color: "#2563EB",
    fontWeight: '500',
  },
  
  // Card Details Section
  cardDetailsSection: {
    flex: 1, // Allow section to expand to fill remaining space
    borderTopLeftRadius: 24,
    borderTopRightRadius: 24,
    padding: 16,
    marginTop: 8, // Reduce vertical spacing between cards and details section
  },
  darkCardDetailBg: {
    backgroundColor: "#1F2937",
  },
  lightCardDetailBg: {
    backgroundColor: "#FFFFFF",
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
  },
  cardInfoContainer: {
    marginBottom: 16,
  },
  cardInfoItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#E5E7EB",
  },
  cardInfoLabel: {
    fontSize: 14,
  },
  cardInfoValueText: {
    fontSize: 14,
    fontWeight: '500',
  },
  statusContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  statusIndicator: {
    width: 8,
    height: 8,
    borderRadius: 4,
    marginRight: 8,
  },
  activeIndicator: {
    backgroundColor: "#10B981",
  },
  inactiveIndicator: {
    backgroundColor: "#EF4444",
  },
  cardActionsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 16,
  },
  withdrawButton: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: "#EF4444",
    paddingVertical: 12,
    borderRadius: 8,
    marginRight: 8,
  },
  transferButton: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: "#2563EB",
    paddingVertical: 12,
    borderRadius: 8,
    marginLeft: 8,
  },
  actionButtonText: {
    color: "#FFFFFF",
    fontWeight: '500',
    marginLeft: 8,
  },
  
  // Modals
  modalOverlay: {
    flex: 1,
    justifyContent: 'flex-end',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContainer: {
    borderTopLeftRadius: 24,
    borderTopRightRadius: 24,
    padding: 16,
    height: '60%',
  },
  darkModalContainer: {
    backgroundColor: "#1F2937",
  },
  lightModalContainer: {
    backgroundColor: "#FFFFFF",
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 24,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
  },
  modalContent: {
    flex: 1,
  },
  inputGroup: {
    marginBottom: 16,
  },
  inputLabel: {
    marginBottom: 8,
    fontSize: 14,
  },
  input: {
    borderWidth: 1,
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
  },
  darkInput: {
    backgroundColor: "#374151",
    borderColor: "#4B5563",
    color: "#FFFFFF",
  },
  lightInput: {
    backgroundColor: "#F9FAFB",
    borderColor: "#E5E7EB",
    color: "#111827",
  },
  modalActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 16,
  },
  cancelButton: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    borderWidth: 1,
    borderColor: "#D1D5DB",
    borderRadius: 8,
    marginRight: 8,
  },
  cancelButtonText: {
    color: "#6B7280",
    fontWeight: '500',
  },
  createButton: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 12,
    backgroundColor: "#2563EB",
    borderRadius: 8,
    marginLeft: 8,
  },
  createButtonText: {
    color: "#FFFFFF",
    fontWeight: '500',
  },
  
  // Radio buttons
  radioGroup: {
    flexDirection: 'row',
    marginBottom: 8,
  },
  radioButton: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 16,
    padding: 8,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: "#D1D5DB",
  },
  radioButtonActive: {
    borderColor: "#2563EB",
  },
  radioInner: {
    width: 18,
    height: 18,
    borderRadius: 9,
    borderWidth: 2,
    borderColor: "#D1D5DB",
    marginRight: 8,
    justifyContent: 'center',
    alignItems: 'center',
  },
  radioInnerActive: {
    borderColor: "#2563EB",
    backgroundColor: "#2563EB",
  },
  radioText: {
    fontSize: 14,
  },
  
  // Checkboxes
  checkboxGroup: {
    marginTop: 8,
  },
  checkbox: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  checkboxInner: {
    width: 20,
    height: 20,
    borderRadius: 4,
    borderWidth: 2,
    borderColor: "#D1D5DB",
    marginRight: 8,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent',
  },
  checkboxActive: {
    backgroundColor: "#2563EB",
    borderColor: "#2563EB",
  },
  checkboxText: {
    fontSize: 14,
  },
  
  // Dropdown
  dropdown: {
    borderWidth: 1,
    borderRadius: 8,
    maxHeight: 120,
  },
  dropdownList: {
    maxHeight: 120,
  },
  dropdownItem: {
    padding: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#E5E7EB",
  },
  selectedDropdownItem: {
    backgroundColor: "#EFF6FF",
  },
  dropdownText: {
    fontSize: 14,
    color: "#111827",
  },
  darkDropdownText: {
    color: "#F9FAFB",
  },
  selectedDropdownText: {
    fontWeight: '500',
    color: "#2563EB",
  },
});

export default CardsScreen;